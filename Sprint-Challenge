{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Linear Algebra Sprint Challenge.ipynb",
      "version": "0.3.2",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-wQxiT7yC4_v",
        "colab_type": "text"
      },
      "source": [
        "#Linear Algebra"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0v8zyo6B92JU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "from sklearn.decomposition import PCA \n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler \n",
        "\n",
        "plt.style.use('seaborn')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aiUlaNJkECCL",
        "colab_type": "text"
      },
      "source": [
        "## 1.1 Graph vector $\\vec{a}$ \n",
        "\n",
        "\\begin{align}\n",
        "\\vec{a} = \\begin{bmatrix} 3 \\\\ 2 \\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QpCKt0n5IeiY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "outputId": "f6d8e807-6f1f-4728-f75a-2cde70813f76"
      },
      "source": [
        "a = [3,2]\n",
        "plt.arrow(0,0, a[0], a[1], head_width=.25, head_length=.25, color = 'b')\n",
        "plt.xlim(0,4)\n",
        "plt.ylim(0,3)\n",
        "plt.title('A two-dimensional vector')\n",
        "plt.show();"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAegAAAFZCAYAAABTxrzcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Wl8VOX99/HvLNmAEExIWAQVBfkL\niAvFaClBKIFAbYsSTOwrWiut9gYFhOptWQQBaaEBwRVFkU0gISC2isWqeAuCAoqIVIqAS1jEbMSE\nzCRkct0P8ndqBDIJZDJnJp/3E5k5k3N+Vy7hO79rzpxjM8YYAQAAS7EHugAAAHA6AhoAAAsioAEA\nsCACGgAACyKgAQCwIAIaAAALIqDRZKSnp+tXv/pVra/ZvXu39u3b5/daXnnlFd1+++2SpAcffFBv\nv/223495Nv48fteuXfXNN9/4Zd/fy87O9uv+gUAhoNEk7N+/X9HR0Wrfvr127dp11tetXbtW//nP\nfxqxMmnOnDkaMGBAox7TSsc/H3l5eXr++ecDXQbgFwQ0moSXX35ZKSkpuummm7R+/fozvmbVqlV6\n5ZVX9Le//U2LFy9WUlKSd9vUqVOVnp7uffzHP/5Rb7zxho4ePaqRI0dq8ODBte67qqpK06dP1403\n3qjU1NQaXfrtt9+uV155RVJ1x5mdna1f/vKX6tevn7Zt26bx48erf//++v3vf6/KykpJ0ocffqjh\nw4crOTlZt956q3JzcyVJ69at05gxYzRx4kQNHjxYQ4cO1eeffy5J2r59u26++WYNHTpUQ4YM0euv\nv37a8T/44APdfPPNSklJ0YgRI7Rnzx6f+83Pz9fIkSOVkpKiAQMG6MUXX6x1LubMmaMZM2Z4HxcW\nFurqq69WSUmJDhw4oIyMDA0ePFi//OUvvceXpOeee04///nPNXjwYP3lL3+RMUbp6ek6evSoUlJS\nVFFRoX379ik9PV0pKSn69a9/rc2bN3vHlZ6errFjx2rChAm11gdYhgFCXGVlpfn5z39uSkpKTFlZ\nmbnxxhtNeXn5GV+bkZFh1q9fb4wxpl+/fubo0aPGGGOGDx9ubrnlFlNeXm6qqqpMYmKiOXHihLnr\nrrvMwoULjTHGHD582PTq1cvk5uaett933nnHDBo0yJSWlhqXy2VSU1NNRkbGace8/PLLvfv761//\nan7yk5+YQ4cOmfLyctO3b1+zdetWU1JSYnr37m22bNlijDHmH//4h7n55puNMcasXbvWXHXVVWbP\nnj3GGGOmTZtmJk2aZIwx5pZbbjEffPCBMcaYL774wowfP77G8UtLS01iYqLZuXOnMcaYf/7zn2bQ\noEHG4/HUut/p06ebhx9+2BhjzNdff226d+/u/b1dfvnl5tixYzV+F7t37zb9+/f3Ps7JyTH33HOP\n8Xg8ZtCgQSY7O9sYY8zOnTvNz372M3Pq1CmzY8cOk5ycbEpKSkx5ebkZPny42bBhg3n//ffNwIED\njTHGeDweM2TIEPOPf/zDGGPMJ598Ynr37m1KSkrM+++/b6688kqzdevWM847YEV00Ah5W7Zs0ZVX\nXqkWLVooKipK1113nTZt2uTz5xITE7Vr1y4VFRUpIiJCV1xxhfbs2aMDBw6offv2atasmbZu3arf\n/OY3kqQLL7xQiYmJev/990/b144dO9SvXz81b95ckZGRGjJkyFmPO3DgQEnS5Zdfro4dO6pTp04K\nDw/XxRdfrOPHj+vDDz9UmzZt1KdPH0nSTTfdpK+//lpHjx6VJF122WXq0aOHJKlbt246duyYJCku\nLk7r16/XwYMHdckll2ju3Lk1jvvJJ5+obdu26tWrlyRp8ODBKioq0pEjR2rd7+TJkzVlyhRJUseO\nHRUfH6/Dhw+fdXw9e/aUMca7ivCvf/1LQ4YM0aFDh1RQUKDU1FRJUq9evRQbG6tdu3bp3XffVb9+\n/dSiRQuFh4dr+fLlGjRoUI39Hj58WPn5+frFL34hSbryyivVvn17bxceGRmpG2644ax1AVbjDHQB\ngL+tW7dO7777rn7yk59Ikjwej4qLizV48OBafy4xMVEff/yxwsPDdfXVV6tTp0766KOP1KJFC91w\nww06ceKEjDGKjo72/kzLli1VWFioFStWaMWKFZKkCRMmqLi4WAkJCTVedzbNmzeXJNntdu+fJcnh\ncKiqqkrfffedcnNzlZKS4t0WHh6uwsJCSapRj8PhkMfjkSTNmjVLzzzzjH73u98pMjJS48ePr7GP\nwsLC0+qKjo5WQUFBrfvds2eP5s6dq2PHjslutysvL09VVVW1/m4HDRqkt956SxdddJE++ugjZWZm\nav/+/XK73TXevJSWlurEiRMqKiqq8fuLioo6bZ+FhYWKjo6WzWbzPvf9fLRu3VoxMTG11gRYDQGN\nkFZcXKzt27frgw8+UHh4uCSpsrJS/fr1U2FhoWJjY8/6s4mJiVq9erXsdrt69+6tSy65RJmZmWre\nvLmGDRumCy64QHa7XcXFxd5//E+cOKG4uDgNHz5cGRkZ3n19/PHHKikp8T7+PkzPRUJCgi699FKt\nW7futG379+8/68+1bt1aU6ZM0ZQpU7Rlyxbdd9996tu3r3d7XFycTpw44X1sjFFxcbHi4uJ06NCh\ns+73gQce0G9/+1vddtttstlsNfZ5NoMHD9ajjz6qLl26qHfv3mrRooUSEhLUvHlz/fOf/zzt9Xv2\n7FFRUZH38Q///MP6i4uLZYzxhvT38wEEI5a4EdJee+01XX/99d5wliSn06mf/exnevXVV097vdPp\n9AbphRdeqO+++04ffPCBrrnmGl166aX68ssvtXfvXvXq1cu7n6ysLEnS119/rZ07d+qnP/3pafu9\n5pprtGXLFrlcLrlcrjOGUF1dddVVysvL0+7duyVJubm5euCBB2RquTHdqVOndPvtt+vbb7+VJHXv\n3l1Op1N2+3//CejZs6fy8/O9Z7m/9tpratu2rTp06FBrPQUFBerRo4dsNptefvlluVwulZWV1foz\n11xzjQoKCrRu3Tpvx3zhhReqbdu23t9NYWGhxo8fr7KyMg0YMEBvv/22iouLVVlZqdGjR2vLli1y\nOp0qKytTZWWlOnTooLZt22rDhg2SpI8++kj5+fnq2bNnrbUAVkUHjZC2fv16/fa3vz3t+eTkZD39\n9NO64447ajw/cOBA/e1vf1Nubq7+/Oc/69prr9VHH33k7bQ7duwol8vlXWJ95JFHNHnyZK1bt05h\nYWGaOXOm2rVrd9rx+vfvr3feeUcpKSlq3bq1+vXrp507d57TmCIjI/X4449rxowZOnnypMLCwjR2\n7NgaS7s/FhYWptTUVN15552SqpfPJ0+eXGOpuFmzZpo/f75mzJihsrIyxcbGat68ebXuV5LGjh2r\n0aNHq1WrVkpPT1daWpqmTJmilStXnvVnbDabBg4cqDVr1ng/C7fZbJo3b56mTZum+fPny26363e/\n+52aNWumq6++WiNHjtSwYcMUHh6uvn376qabbtLJkycVExOjPn366OWXX9a8efM0depUPfnkk4qK\nitKCBQvUrFmzevx2AeuwmdredgMAgIBgiRsAAAvyucTtcrn00EMPqaCgQOXl5Ro1apT69+/v3b51\n61bNmzdPDodDSUlJGj16tF8LBgCgKfAZ0Js2bVKPHj30hz/8QUeOHNFdd91VI6BnzpypF154QW3a\ntPFeAahz585+LRoAgFDnM6CHDh3q/fOxY8fUpk0b7+Pc3FzFxMR4T4r5/tKEBDQAAOenzmdxp6en\n65tvvtHChQu9z+Xl5dX4HmlsbKz3msAAAODc1fkksdWrV+uZZ57x+X1LXzhpHAAA33x20J9++qni\n4uLUrl07XXHFFfJ4PCosLFRcXJwSEhKUn5/vfe3x48drXI7vTGw2m/LySmp9TTCLj49mfEEslMcX\nymOTGF+wawrjqy+fHfTOnTu1ePFiSdW3lSsrK9MFF1wgSerQoYNKS0t1+PBhVVZWatOmTd4L+AMA\ngHPns4NOT0/XpEmT9Jvf/EZut1sPP/yw1q9fr+joaCUnJ2vatGne+6sOHTpUnTp18nvRAACEOp8B\nHRkZedpt6X6od+/e3msRAwCAhsGVxAAAsCACGgAACyKgAQCwIAIaAAALIqABALAgAhoAAAsioAEA\nsCACGgAACyKgAQCwIAIaAAALIqABALAgAhoAAAsioAEAsCACGgAACyKgAQCwIAIaAAALIqABALAg\nAhoAAAsioAEAsCACGgAACyKgAQCwIAIaAAALIqABALAgAhoAAAsioAEAsCACGgAACyKgAQCwIAIa\nAAALIqABALAgAhoAAAsioAEAsCACGgAACyKgAQCwIAIaAAALIqABALAgAhoAAAsioAEAsCACGgAA\nCyKgAQCwIAIaAAALIqABALAgZ11eNGfOHH344YeqrKzUPffco0GDBnm3DRgwQG3btpXD4ZAkZWZm\nqk2bNv6pFgCAJsJnQL///vv6/PPPlZWVpaKiIt188801AlqSFi1apObNm/utSAAAmhqfAd27d2/1\n7NlTktSyZUu5XC55PB5vxwwAABqez4B2OBxq1qyZJCknJ0dJSUmnhfPUqVN15MgR9erVSxMmTJDN\nZvNPtQAANBE2Y4ypywvffPNNPfvss1q8eLGio6O9z69fv159+/ZVTEyMRo8erZtvvlkpKSl+KxgA\ngKagTgG9efNmLViwQM8//7xatWp11te99NJLKigo0JgxY2rdX15eSf0rDRLx8dGML4iF8vhCeWwS\n4wt2TWF89eXza1YlJSWaM2eOnn322dPCuaSkRCNHjlRFRYUkaceOHerSpUu9iwAAADX5/Ax6w4YN\n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\n",
            "text/plain": [
              "<Figure size 576x396 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BDLB08NXEiUN",
        "colab_type": "text"
      },
      "source": [
        "## 1.2 Find $||\\vec{b}||$. What does the norm of a vector represent?\n",
        "\\begin{align}\n",
        "\\vec{b} = \\begin{bmatrix} 17 & -4 & -2 & 1\\end{bmatrix}\n",
        "\\end{align}\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fp3mocAKIfGD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "de0c4e2b-76a7-4752-a03a-c2489139e7f9"
      },
      "source": [
        "b = np.array([17, -4,-2,1])\n",
        "print(np.linalg.norm(b))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "17.60681686165901\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xoY40cb2-ij2",
        "colab_type": "text"
      },
      "source": [
        "The norm of a vector is the length of the vector also know as the magnitude.\n",
        " "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vBbJ0ZyPD6RG",
        "colab_type": "text"
      },
      "source": [
        "## 1.3 Find $\\vec{c} \\cdot \\vec{d}$ - Are these vectors orthogonal? Why or why not?\n",
        "\n",
        "\\begin{align}\n",
        "\\vec{c} = \\begin{bmatrix}3 & 7 & -2 & 12\\end{bmatrix}\n",
        "\\qquad\n",
        "\\vec{d} = \\begin{bmatrix}9 & -7 & 4 & 6\\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NYb8BalmIfgY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "270e5dfe-0c86-4f2f-e641-3dad841c1a5c"
      },
      "source": [
        "c = np.array([3, 7, -2, 12])\n",
        "d = np.array([9, -7, 4, 6])\n",
        "\n",
        "np.dot(c, d)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "42"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y9P25cSN_dDC",
        "colab_type": "text"
      },
      "source": [
        "vectors c and d are not orthogonal (perpendicular), if they were their dot product would be 0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gS85sJHWG7iU",
        "colab_type": "text"
      },
      "source": [
        "## 1.4 Find $E^{-1}$ and $E^{T}$\n",
        "\n",
        "\\begin{align}\n",
        "E = \n",
        "\\begin{bmatrix}\n",
        "    7 & 4 & 2 \\\\\n",
        "    1 & 3 & -1 \\\\\n",
        "    2 & 6 & -4\n",
        "\\end{bmatrix}\n",
        "\\end{align}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QiISq5egIgSS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "outputId": "d8f61adf-cee3-471d-c845-33357334ff5e"
      },
      "source": [
        "e = np.array([[7, 4, -2],\n",
        "              [1, 3, -1],\n",
        "              [2, 6, -4]])\n",
        "\n",
        "inverse_e = np.linalg.inv(e)\n",
        "transpose_e = np.transpose(e)\n",
        "\n",
        "print(f'The inverse of E:\\n {inverse_e}\\n')\n",
        "print(f'The transpose of E:\\n {transpose_e}\\n')"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The inverse of E:\n",
            " [[ 0.17647059 -0.11764706 -0.05882353]\n",
            " [-0.05882353  0.70588235 -0.14705882]\n",
            " [ 0.          1.         -0.5       ]]\n",
            "\n",
            "The transpose of E:\n",
            " [[ 7  1  2]\n",
            " [ 4  3  6]\n",
            " [-2 -1 -4]]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TPzrKzEvC5YU",
        "colab_type": "text"
      },
      "source": [
        "# Intermediate Linear Algebra"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ap-us2lBGQyi",
        "colab_type": "text"
      },
      "source": [
        "## 2.1 Suppose that the number of customers at a ski resort as well as the number of inches of fresh powder (snow)  was recorded for 7 days. \n",
        "\n",
        "### Customers: [820, 760, 1250, 990, 1080, 1450, 1600]\n",
        "\n",
        "### Inches of new snow: [0, 1, 7, 1, 0, 6, 4 ]\n",
        "\n",
        "## Find the mean, variance, and standard deviation for both the number of customers and inches of new snow for the week. You may use library functions, dataframes, .describe(), etc. \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xS-JuHl9JiiP",
        "colab_type": "code",
        "outputId": "bbb30506-4827-4cc2-9108-00467e826d36",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "customers = [820, 760, 1250, 990, 1080, 1450, 1600]\n",
        "snow = [0, 1, 7, 1, 0, 6, 4]\n",
        "\n",
        "df = pd.DataFrame({'customers': customers, 'snow': snow})\n",
        "\n",
        "df.head()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customers</th>\n",
              "      <th>snow</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>820</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>760</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1250</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>990</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1080</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   customers  snow\n",
              "0        820     0\n",
              "1        760     1\n",
              "2       1250     7\n",
              "3        990     1\n",
              "4       1080     0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cNxeVa0cg40d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def mean_var_stdev (l):\n",
        "  \"\"\"\n",
        "  mean_var_stdev returns the mean, variance and stdev of a list l \n",
        "  l: list \n",
        "  return: mean, variance, standard deviation \n",
        "  \"\"\"\n",
        "  N = len(l)\n",
        "  m = sum(l)/N\n",
        "  v_sq_dist = [(l[i]-m)**2 for i in range(N)]\n",
        "  v = sum(v_sq_dist)/N\n",
        "  std = np.sqrt(v)\n",
        "  return m, v, std"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VcNiTcjgBswO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "8b5c379c-e189-4942-d16e-8a5e97909679"
      },
      "source": [
        "customers_stats = mean_var_stdev(df['customers'])\n",
        "print(f' mean: {customers_stats[0]}\\n variance: {customers_stats[1]}\\n standard deviation: {customers_stats[2]}')"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " mean: 1135.7142857142858\n",
            " variance: 84653.06122448981\n",
            " standard deviation: 290.95199127087926\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_2bPQMNwCB-z",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 67
        },
        "outputId": "b9461a81-d48d-48b8-8ab3-174d71ae906b"
      },
      "source": [
        "snow_stats = mean_var_stdev(df['snow'])\n",
        "print(f' mean: {snow_stats[0]}\\n variance: {snow_stats[1]}\\n standard deviation: {snow_stats[2]}')"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " mean: 2.7142857142857144\n",
            " variance: 7.346938775510203\n",
            " standard deviation: 2.7105237087157534\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3ePJtK4VLTLH",
        "colab_type": "text"
      },
      "source": [
        "## 2.2 Are the variances of the number of customers and inches of snow comparable? \n",
        "## Why or why not? "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3pJ9Jp9UDBxw",
        "colab_type": "text"
      },
      "source": [
        "No, they are in different units with wildly different spreads. Variance is just the measure of the spread, the standard deviation puts this measure into the same units as the mean which is useful but not for when you are comparing to very different data sets.\n",
        "\n",
        "To compare different data sets we can use a variance-covariance matrix and a correlation coefficient."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ixhZVGxfGVFh",
        "colab_type": "text"
      },
      "source": [
        "## 2.3 Find the variance-covariance matrix for the number of customers and inches of snow at the ski resort. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IbglmVaxJjO7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "46318c99-be6c-4ec0-fad9-02f614150f92"
      },
      "source": [
        "df.cov()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customers</th>\n",
              "      <th>snow</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>customers</th>\n",
              "      <td>98761.904762</td>\n",
              "      <td>670.238095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>snow</th>\n",
              "      <td>670.238095</td>\n",
              "      <td>8.571429</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              customers        snow\n",
              "customers  98761.904762  670.238095\n",
              "snow         670.238095    8.571429"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d5xeIYmGEAKl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "938f2772-4fbc-464a-a681-046dc23801ed"
      },
      "source": [
        "df.corr()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customers</th>\n",
              "      <th>snow</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>customers</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.728463</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>snow</th>\n",
              "      <td>0.728463</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           customers      snow\n",
              "customers   1.000000  0.728463\n",
              "snow        0.728463  1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Ks3_TbNC5yJ",
        "colab_type": "text"
      },
      "source": [
        "# PCA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f6qJAPaaOdzD",
        "colab_type": "text"
      },
      "source": [
        "## 3.1 Standardize the data so that it has a mean of 0 and a standard deviation of 1. (You may use library functions)\n",
        "\n",
        "We have included some code to get you started so that you don't get stuck on something that isn't standardizing the data or PCA.\n",
        "\n",
        "This might be helpful:\n",
        "\n",
        "<https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bogsxfNyJlAw",
        "colab_type": "code",
        "outputId": "3ab1c439-0827-4212-c090-fd93d1ffa0d5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        }
      },
      "source": [
        "# Let me get you some data to start you off.\n",
        "\n",
        "data = {\"Country\": [\"England\",\"Wales\",\"Scotland\",\"North Ireland\"], \n",
        "        \"Cheese\": [105,103,103,66], \n",
        "        \"Carcass_Meat\": [245,227,242,267], \n",
        "        \"Other_Meat\": [685, 803, 750, 586], \n",
        "        \"Fish\": [147, 160, 122, 93], \n",
        "        \"Fats_and_Oils\": [193, 235, 184, 209], \n",
        "        \"Sugars\": [156, 175, 147, 139], \n",
        "        \"Fresh_Potatoes\": [720, 874, 566, 1033], \n",
        "        \"Fresh_Veg\": [253, 265, 171, 143], \n",
        "        \"Other_Veg\": [488, 570, 418, 355], \n",
        "        \"Processed_Potatoes\": [198, 203, 220, 187], \n",
        "        \"Processed_Veg\": [360, 365, 337, 334], \n",
        "        \"Fresh_Fruit\": [1102, 1137, 957, 674], \n",
        "        \"Cereals\": [1472, 1582, 1462, 1494], \n",
        "        \"Beverages\": [57,73,53,47], \n",
        "        \"Soft_Drinks\": [1374, 1256, 1572, 1506], \n",
        "        \"Alcoholic Drinks\": [375, 475, 458, 135], \n",
        "        \"Confectionery\": [54, 64, 62, 41]}\n",
        "\n",
        "\n",
        "# Look at the data\n",
        "df.head()"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Cheese</th>\n",
              "      <th>Carcass_Meat</th>\n",
              "      <th>Other_Meat</th>\n",
              "      <th>Fish</th>\n",
              "      <th>Fats_and_Oils</th>\n",
              "      <th>Sugars</th>\n",
              "      <th>Fresh_Potatoes</th>\n",
              "      <th>Fresh_Veg</th>\n",
              "      <th>Other_Veg</th>\n",
              "      <th>Processed_Potatoes</th>\n",
              "      <th>Processed_Veg</th>\n",
              "      <th>Fresh_Fruit</th>\n",
              "      <th>Cereals</th>\n",
              "      <th>Beverages</th>\n",
              "      <th>Soft_Drinks</th>\n",
              "      <th>Alcoholic Drinks</th>\n",
              "      <th>Confectionery</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>England</td>\n",
              "      <td>105</td>\n",
              "      <td>245</td>\n",
              "      <td>685</td>\n",
              "      <td>147</td>\n",
              "      <td>193</td>\n",
              "      <td>156</td>\n",
              "      <td>720</td>\n",
              "      <td>253</td>\n",
              "      <td>488</td>\n",
              "      <td>198</td>\n",
              "      <td>360</td>\n",
              "      <td>1102</td>\n",
              "      <td>1472</td>\n",
              "      <td>57</td>\n",
              "      <td>1374</td>\n",
              "      <td>375</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Wales</td>\n",
              "      <td>103</td>\n",
              "      <td>227</td>\n",
              "      <td>803</td>\n",
              "      <td>160</td>\n",
              "      <td>235</td>\n",
              "      <td>175</td>\n",
              "      <td>874</td>\n",
              "      <td>265</td>\n",
              "      <td>570</td>\n",
              "      <td>203</td>\n",
              "      <td>365</td>\n",
              "      <td>1137</td>\n",
              "      <td>1582</td>\n",
              "      <td>73</td>\n",
              "      <td>1256</td>\n",
              "      <td>475</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Scotland</td>\n",
              "      <td>103</td>\n",
              "      <td>242</td>\n",
              "      <td>750</td>\n",
              "      <td>122</td>\n",
              "      <td>184</td>\n",
              "      <td>147</td>\n",
              "      <td>566</td>\n",
              "      <td>171</td>\n",
              "      <td>418</td>\n",
              "      <td>220</td>\n",
              "      <td>337</td>\n",
              "      <td>957</td>\n",
              "      <td>1462</td>\n",
              "      <td>53</td>\n",
              "      <td>1572</td>\n",
              "      <td>458</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>North Ireland</td>\n",
              "      <td>66</td>\n",
              "      <td>267</td>\n",
              "      <td>586</td>\n",
              "      <td>93</td>\n",
              "      <td>209</td>\n",
              "      <td>139</td>\n",
              "      <td>1033</td>\n",
              "      <td>143</td>\n",
              "      <td>355</td>\n",
              "      <td>187</td>\n",
              "      <td>334</td>\n",
              "      <td>674</td>\n",
              "      <td>1494</td>\n",
              "      <td>47</td>\n",
              "      <td>1506</td>\n",
              "      <td>135</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Country  Cheese  ...  Alcoholic Drinks  Confectionery\n",
              "0        England     105  ...               375             54\n",
              "1          Wales     103  ...               475             64\n",
              "2       Scotland     103  ...               458             62\n",
              "3  North Ireland      66  ...               135             41\n",
              "\n",
              "[4 rows x 18 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EdSVYlScFECQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = df.drop('Country', axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2HY91nOpaTTZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "1a4e9e2f-7a2d-47dd-fc80-983fd8359314"
      },
      "source": [
        "normalize = StandardScaler().fit(df)\n",
        "df_noralized = normalize.transform(df)"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.2653618371328133e-18"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5U50KZkdJb_s",
        "colab_type": "text"
      },
      "source": [
        "## 3.2 Perform PCA on the data and graph Principal Component 1 against Principal Component 2. (You may use library functions)\n",
        "\n",
        "This might be helpful:\n",
        "\n",
        "<https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RqjwVokgP1fL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "outputId": "d49565ca-3cb5-407c-ee4f-645d9979d3fa"
      },
      "source": [
        "pca = PCA(n_components=2).fit(df)\n",
        "reduced_data = pca.transform(df)\n",
        "pca_samples = pca.transform(df)\n",
        "reduced_data = pd.DataFrame(reduced_data, columns = ['Component 1', 'Component 2'])\n",
        "reduced_data"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Component 1</th>\n",
              "      <th>Component 2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-144.993152</td>\n",
              "      <td>-2.532999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-240.529148</td>\n",
              "      <td>-224.646925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-91.869339</td>\n",
              "      <td>286.081786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>477.391639</td>\n",
              "      <td>-58.901862</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Component 1  Component 2\n",
              "0  -144.993152    -2.532999\n",
              "1  -240.529148  -224.646925\n",
              "2   -91.869339   286.081786\n",
              "3   477.391639   -58.901862"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dV1o2Y5GGs91",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        },
        "outputId": "3076ff50-9121-42b8-9d19-064fde260d35"
      },
      "source": [
        "X = reduced_data['Component 1']\n",
        "Y = reduced_data['Component 2']\n",
        "plt.title('Principal Component 1 against Principal Component 2')\n",
        "plt.xlabel('Component 1')\n",
        "plt.ylabel('Component 2')\n",
        "plt.scatter(reduced_data['Component 1'], reduced_data['Component 2']);"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nSYohT0REJCmGPBERkaQY8kRERJJiyBMREUmKIU9ERCQphjwREZGkGPJERESSYsgTERFJiiFPREQk\nKYY8ERGRpBjyREREkmLIExERSYohT0REJCmGPBERkaQY8kRERJLSNMWHrlmzBufPn0d5eTmmTJkC\nR0dHzJ8/HxUVFbCzs8PatWthZmaGgwcPYvfu3TAxMcHYsWPh5+fXFOUSEREZJYOH/NmzZ3Ht2jWE\nhYUhKysLL774IlxdXTFhwgT4+vpi/fr1iIiIwMiRI/HBBx8gIiICpqamGDNmDAYNGoRWrVoZumQi\nIiKjZPDd9b169cL7778PALC2tkZRURGio6MxcOBAAICHhweioqIQFxcHR0dHWFlZwcLCAi4uLoiN\njTV0uUREREbL4DN5tVoNS0tLAEBERASef/55/PDDDzAzMwMA2NraIi0tDenp6dBqtcrrtFot0tLS\n6nxvGxtLaDRq/RXfyOzsrJq6BL2TvUfZ+wPk71H2/gD5e5S9P6DhPTbJMXkAOH78OCIiIrBr1y54\ne3sr40KIGp9f23hVWVmFjVafvtnZWSEtLa+py9Ar2XuUvT9A/h5l7w+Qv0fZ+wPq7lFX+DfJ2fXf\nf/89tm7diu3bt8PKygqWlpYoLi4GAKSkpMDe3h729vZIT09XXpOamgp7e/umKJeIiMgoGTzk8/Ly\nsGbNGmzbtk05ic7NzQ1Hjx4FABw7dgzu7u5wcnJCfHw8cnNzUVBQgNjYWPTs2dPQ5RIRERktg++u\nP3z4MLKysjBr1ixlbNWqVViwYAHCwsLQrl07jBw5EqamppgzZw4mT54MlUqFadOmwcpK/uMuRERE\njUUl6nOw20gY03GZv/pxJBnI3h8gf4+y9wfI36Ps/QFGeEyeiIiI9I8hT0REJCmGPBERkaQY8kRE\nRJJiyBMREUmKIU9ERCQphjwREZGkGPJERESSYsgTERFJiiFPREQkKYY8ERGRpBjyREREkmLIExER\nSYohT0REJCmGPBERkaQY8kRERJJiyBMREUmKIU9ERCQphjwREZGkGPJERESSYsgTERFJiiFPREQk\nKYY8ERGRpBjyREREkmLIExERSYohT0REJCmGPBERkaQY8kRERJJiyBMREUmKIU9ERCQphjwREZGk\nGPJERESSYsgTERFJiiFPREQkKYY8ERGRpBjyREREkmLIExERSYohT0REJCmGPBERkaQY8kRERJJi\n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\nAwbeJGpaXlNqAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 576x396 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z-RzYKR0C6Wg",
        "colab_type": "text"
      },
      "source": [
        "# Clustering"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "62efk4plJe54",
        "colab_type": "text"
      },
      "source": [
        "## 4.1 Use K-Means to cluster the following data and then graph your results. (You may use library functions)\n",
        "\n",
        "We have included some code to get you started so that you don't get stuck on something that isn't standardizing clustering.\n",
        "\n",
        "Prioritize calculating the clusters over graphing them. \n",
        "\n",
        "Scikit-Learn K-Means Documentation:\n",
        "\n",
        "<https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "miK5Aeg-JlzJ",
        "colab_type": "code",
        "outputId": "298a1e78-03d8-4ff8-d06a-a5bcbda93a89",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        }
      },
      "source": [
        "points = pd.read_csv('https://raw.githubusercontent.com/ryanleeallred/datasets/master/points.csv')\n",
        "points.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-7.846803</td>\n",
              "      <td>-3.421277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-3.554323</td>\n",
              "      <td>-6.884729</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.192822</td>\n",
              "      <td>-9.671030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-6.401456</td>\n",
              "      <td>-5.223972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.804026</td>\n",
              "      <td>-9.704457</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          x         y\n",
              "0 -7.846803 -3.421277\n",
              "1 -3.554323 -6.884729\n",
              "2 -0.192822 -9.671030\n",
              "3 -6.401456 -5.223972\n",
              "4 -0.804026 -9.704457"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qX0zKKznTzcI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "##### Your Code Here #####"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}